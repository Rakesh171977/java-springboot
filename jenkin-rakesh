pipeline {
    agent any

    tools {
        maven 'maven'
    }

    environment {
        DOCKER_IMAGE       = "rakesh171977/springboot-app"
        DOCKER_CREDENTIALS = "dockerhub-cred"       // Update with your Jenkins Docker Hub credentials ID
        AWS_CREDS          = "aws-cred"             // Update with your Jenkins AWS credentials ID
        AWS_REGION         = "eu-west-2"
        EKS_CLUSTER        = "team4-eks-cluster"
        KUBE_NAMESPACE     = "rakesh-namespace"
        DEPLOYMENT_NAME    = "springboot-deployment"
        CONTAINER_NAME     = "springboot-container"
        DB_HOST            = "mysql-service"
        APP_ENV            = "production"
        APP_DEBUG          = "false"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Rakesh171977/java-springboot.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .
                    docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: DOCKER_CREDENTIALS,
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
                        docker push ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: AWS_CREDS,
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh """
                        aws configure set default.region "$AWS_REGION"
                        aws eks update-kubeconfig --region "$AWS_REGION" --name "$EKS_CLUSTER"

                        # Create namespace if it doesn't exist
                        kubectl get ns "$KUBE_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$KUBE_NAMESPACE"

                        # Deploy Spring Boot app with NodePort service dynamically
                        kubectl apply -n "$KUBE_NAMESPACE" -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${DEPLOYMENT_NAME}
  namespace: ${KUBE_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
    spec:
      containers:
      - name: ${CONTAINER_NAME}
        image: ${DOCKER_IMAGE}:latest
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          value: ${DB_HOST}
        - name: APP_ENV
          value: ${APP_ENV}
        - name: APP_DEBUG
          value: ${APP_DEBUG}
---
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
  namespace: ${KUBE_NAMESPACE}
spec:
  type: NodePort
  selector:
    app: springboot-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful! Your app is running in the '$KUBE_NAMESPACE' namespace."
        }
        failure {
            echo "Deployment failed!"
        }
    }
}

